# packages/pumpsteer.yaml
# ═══════════════════════════════════════════════════════════
# INPUT ENTITIES
# ═══════════════════════════════════════════════════════════

input_number:
  pumpsteer_aggressiveness:
    name: PumpSteer Aggressiveness
    min: 0
    max: 5
    step: 1
    unit_of_measurement: "level"
    icon: mdi:lightning-bolt-circle
    mode: box

  pumpsteer_summer_threshold:
    name: Summer Mode Threshold
    min: 0
    max: 30
    step: 0.5
    unit_of_measurement: "°C"
    mode: box

  indoor_target_temperature:
    name: Indoor Target Temperature
    min: 16
    max: 27
    step: 0.5
    unit_of_measurement: "°C"
    icon: mdi:thermometer
    mode: box

  house_inertia:
    name: House Inertia
    min: 0
    max: 5.0
    step: 0.1
    icon: mdi:home-thermometer
    mode: box

  integral_temp_error:
    name: "Integral Temperature Error"
    min: -1000
    max: 1000
    step: 0.1
    unit_of_measurement: "°C·h"
    mode: box

  pumpsteer_integral_gain:
    name: "PumpSteer Integral Gain"
    min: 0.0
    max: 1.0
    step: 0.01
    mode: box
    unit_of_measurement: ""
    icon: mdi:tune

input_text:
  hourly_forecast_temperatures:
    name: Hourly Forecast Temperatures
    max: 255
    initial: ""
    
  last_gain_adjustment:
    name: Last Gain Adjustment
    initial: "-"
    max: 50

input_boolean:
  holiday_mode:
    name: Holiday Mode Active
    icon: mdi:beach
    initial: false

  autotune_inertia:
    name: Autotune Inertia
    icon: mdi:robot

  pumpsteer_preboost_enabled:
    name: PumpSteer Preboost
    icon: mdi:rocket-launch

input_datetime:
  holiday_start:
    name: Holiday Start
    has_date: true
    has_time: true

  holiday_end:
    name: Holiday End
    has_date: true
    has_time: true

input_select:
  pumpsteer_price_model:
    name: "PumpSteer Price Model"
    options:
      - "hybrid"
      - "percentiles"
    icon: mdi:chart-line

# ═══════════════════════════════════════════════════════════
# TEMPLATE SENSORS
# ═══════════════════════════════════════════════════════════

template:
  - sensor:
      - name: "Real Outdoor Temperature"
        unique_id: ps_real_outdoor_temp
        state: >
          {{ state_attr('sensor.pumpsteer', 'outdoor_temperature') | default('unavailable') }}
        unit_of_measurement: "°C"
        device_class: temperature
        availability: >
          {{ state_attr('sensor.pumpsteer', 'outdoor_temperature') is not none }}

      - name: "PumpSteer Indoor Target Diff"
        unique_id: ps_indoor_target_diff
        state: >
          {% set actual = state_attr('sensor.pumpsteer', 'indoor_temperature') %}
          {% set target = state_attr('sensor.pumpsteer', 'target_temperature') %}
          {% if actual is not none and target is not none %}
            {{ (actual | float(0) - target | float(0)) | round(1) }}
          {% else %}
            unavailable
          {% endif %}
        unit_of_measurement: "°C"
        icon: mdi:home-thermometer-outline
        availability: >
          {{ state_attr('sensor.pumpsteer', 'indoor_temperature') is not none and
            state_attr('sensor.pumpsteer', 'target_temperature') is not none }}

      - name: "PumpSteer Operating Mode"
        unique_id: ps_operating_mode
        state: >
          {{ state_attr('sensor.pumpsteer', 'mode') | default('Starting...') | title }}
        icon: >
          {% set mode = state_attr('sensor.pumpsteer', 'mode') %}
          {% if mode == 'preboost' %}
            mdi:flash
          {% elif mode == 'heating' %}
            mdi:fire
          {% elif mode == 'cooling' %}
            mdi:snowflake
          {% elif mode == 'neutral' %}
            mdi:pause-circle
          {% elif mode == 'summer_mode' %}
            mdi:weather-sunny
          {% elif mode in ['braking_by_price', 'braking_by_temp'] %}
            mdi:car-brake-alert
          {% elif mode == 'passthrough' %}
            mdi:transit-connection-variant
          {% elif mode == 'error' %}
            mdi:alert-circle
          {% else %}
            mdi:help-circle
          {% endif %}

      - name: "PumpSteer Status Summary"
        unique_id: ps_status_summary
        state: >
          {% set mode = state_attr('sensor.pumpsteer', 'mode') %}
          {% set price_cat = state_attr('sensor.pumpsteer', 'price_category') %}
          {% set temp_diff = state_attr('sensor.pumpsteer', 'temp_error_c') %}

          {% if mode is none or price_cat is none or temp_diff is none %}
            🔄 Starting up...
          {% else %}
            {% set temp_diff = temp_diff | float(0) %}
            {% if mode == 'preboost' %}
              🔥 Pre-boost active
            {% elif mode == 'braking_by_price' %}
              💰 Price Braking ({{ price_cat.split('(')[0].strip() if '(' in price_cat else price_cat }})
            {% elif mode == 'braking_by_temp' %}
              🌡️ Temp Braking ({{ temp_diff | round(1) }}°C above target)
            {% elif mode == 'heating' %}
              🔥 Heating ({{ temp_diff | round(1) }}°C below target)
            {% elif mode == 'cooling' %}
              ❄️ Cooling ({{ temp_diff | round(1) }}°C above target)
            {% elif mode == 'precool' %}
              🧊 Precooling
            {% elif mode == 'summer_mode' %}
              ☀️ Summer Mode
            {% elif mode == 'neutral' %}
              ⚖️ Neutral (±{{ temp_diff | abs | round(1) }}°C)
            {% elif mode == 'holiday' %}
              🏖️ Holiday Mode
            {% elif mode == 'initializing' %}
              🔄 Initializing...
            {% else %}
              ❓ {{ mode | title }}
            {% endif %}
          {% endif %}

      - name: "PumpSteer Current Price Level"
        unique_id: ps_current_price_level
        unit_of_measurement: "%"
        state: >
          {% set price = state_attr('sensor.pumpsteer', 'current_price') | float(0) %}
          {% set max_price = state_attr('sensor.pumpsteer', 'max_price') | float(1) %}
          {% if max_price > 0 %}
            {{ (price / max_price * 100) | round(0) }}
          {% else %}
            0
          {% endif %}
        icon: mdi:cash-clock
        availability: >
          {{ state_attr('sensor.pumpsteer', 'current_price') is not none and
            state_attr('sensor.pumpsteer', 'max_price') is not none }}

      - name: "PumpSteer Inertia"
        unique_id: ps_inertia
        state: >
          {{ state_attr('sensor.pumpsteer', 'inertia') | default(0) }}
        icon: mdi:speedometer
        state_class: measurement

      - name: "PumpSteer Aggressiveness"
        unique_id: ps_aggressiveness
        state: >
          {{ state_attr('sensor.pumpsteer', 'aggressiveness') | default(0) }}
        icon: mdi:target
        state_class: measurement

      - name: "PumpSteer Is Preboosting"
        unique_id: ps_is_preboosting
        state: >
          {% set mode = state_attr('sensor.pumpsteer', 'mode') %}
          {{ mode == 'preboost' if mode is not none else false }}
        icon: mdi:fire

      - name: "PumpSteer Is Braking"
        unique_id: ps_is_braking
        state: >
          {% set mode = state_attr('sensor.pumpsteer', 'mode') %}
          {{ mode in ['braking_by_price', 'braking_by_temp'] if mode is not none else false }}
        icon: mdi:car-brake-alert

      - name: "PumpSteer Price Category"
        unique_id: ps_price_category
        state: >
          {% set category = state_attr('sensor.pumpsteer', 'price_category') %}
          {% if category %}
            {{ category.split('(')[0].strip() | title }}
          {% else %}
            Unknown
          {% endif %}
        icon: >
          {% set category = state_attr('sensor.pumpsteer', 'price_category') %}
          {% if category %}
            {% if 'very_cheap' in category %}
              mdi:currency-usd-off
            {% elif 'cheap' in category %}
              mdi:cash-minus
            {% elif 'expensive' in category %}
              mdi:cash-plus
            {% elif 'very_expensive' in category %}
              mdi:cash-remove
            {% else %}
              mdi:cash
            {% endif %}
          {% else %}
            mdi:help-circle
          {% endif %}

      - name: "PumpSteer Next Hour Prediction"
        unique_id: ps_next_hour_prediction
        state: >
          {% set prices = state_attr('sensor.pumpsteer', 'next_3_hours_prices') %}
          {% set current_price = state_attr('sensor.pumpsteer', 'current_price') | float(0) %}
          {% if prices is iterable and prices | length > 1 %}
            {% set next_price = prices[1] | float(0) %}
            {% if current_price > 0 %}
              {% set change = ((next_price - current_price) / current_price * 100) | round(0) %}
              {% if change > 5 %}
              Rising ({{ change }}%)
              {% elif change < -5 %}
                Falling ({{ change }}%)
              {% else %}
                Stable ({{ change }}%)
              {% endif %}
            {% else %}
              No price change
            {% endif %}
          {% else %}
            No forecast
          {% endif %}

      - name: "PumpSteer Data Quality"
        unique_id: ps_data_quality
        state: >
          {% set dq = state_attr('sensor.pumpsteer', 'data_quality') %}
          {% if dq is mapping %}
            {% set pc = dq.prices_count | int(0) %}
            {% set cc = dq.categories_count | int(0) %}
            {% set fc = dq.forecast_available %}
            {% if pc >= 24 and cc >= 24 and fc %}
              🟢 Excellent
            {% elif pc >= 12 and cc >= 12 %}
              🟡 Good
            {% elif pc > 0 %}
              🟠 Limited
            {% else %}
              🔴 Poor
            {% endif %}
          {% else %}
            🔄 Waiting for data
          {% endif %}

      - name: "PumpSteer System Health"
        unique_id: ps_system_health
        state: >
          {% set status = state_attr('sensor.pumpsteer', 'status') %}
          {% set data_quality = state_attr('sensor.pumpsteer', 'data_quality') %}
          
          {% if status == 'ok' and data_quality %}
            {% set dq = data_quality %}
            {% if dq.prices_count >= 24 and dq.categories_count >= 24 %}
              🟢 Healthy
            {% elif dq.prices_count >= 12 %}
              🟡 Limited Data
            {% else %}
              🟠 Poor Data
            {% endif %}
          {% elif 'error' in (status | lower) %}
            🔴 Error
          {% elif 'fallback' in (status | lower) %}
            🟠 Fallback Mode
          {% else %}
            ⚪ Unknown
          {% endif %}
        icon: >
          {% set health = states('sensor.pumpsteer_system_health') %}
          {% if '🟢' in health %}
            mdi:check-circle
          {% elif '🟡' in health %}
            mdi:alert-circle
          {% elif '🟠' in health %}
            mdi:alert
          {% elif '🔴' in health %}
            mdi:alert-circle-outline
          {% else %}
            mdi:help-circle
          {% endif %}

      - name: "PumpSteer Efficiency Score"
        unique_id: ps_efficiency_score
        unit_of_measurement: "%"
        state: >
          {% set temp_error = state_attr('sensor.pumpsteer', 'temp_error_c') | float(0) | abs %}
          {% set saving_potential = state_attr('sensor.pumpsteer', 'saving_potential_sek_per_kwh') | float(0) %}
          {% set comfort_score = [0, 100 - (temp_error * 20)] | max %}
          {% set cost_score = [100, (saving_potential * 25) | round(0)] | min %}
          {{ ((comfort_score + cost_score) / 2) | round(0) }}
        icon: mdi:medal
        state_class: measurement

      # ML-related sensors
      - name: "PumpSteer ML Success Rate"
        unique_id: ps_ml_success_rate
        unit_of_measurement: "%"
        icon: mdi:chart-line
        state: >
          {{ state_attr('sensor.pumpsteer_ml_analysis', 'success_rate') | default('unknown') }}

      - name: "PumpSteer ML Avg Heating Duration"
        unique_id: ps_ml_avg_heating_duration
        unit_of_measurement: "min"
        icon: mdi:timer-outline
        state: >
          {{ state_attr('sensor.pumpsteer_ml_analysis', 'avg_heating_duration') | default('unknown') }}

      - name: "PumpSteer ML Most Used Aggressiveness"
        unique_id: ps_ml_most_used_aggressiveness
        icon: mdi:target
        state: >
          {{ state_attr('sensor.pumpsteer_ml_analysis', 'most_used_aggressiveness') | default('unknown') }}

      - name: "PumpSteer ML Total Heating Sessions"
        unique_id: ps_ml_total_heating_sessions
        icon: mdi:fire
        state: >
          {{ state_attr('sensor.pumpsteer_ml_analysis', 'total_heating_sessions') | default('unknown') }}

      - name: "PumpSteer ML Recommendation"
        unique_id: ps_ml_recommendation
        icon: mdi:lightbulb-on-outline
        state: >
          {{ state_attr('sensor.pumpsteer_ml_analysis', 'recommendations') | default('No recommendations yet') }}
          
      # --- ADDED: Difference between PumpSteer (virtual) and real outdoor temperature ---
      - name: "PumpSteer Delta"
        unique_id: pumpsteer_delta
        unit_of_measurement: "°C"
        icon: mdi:swap-horizontal-bold
        device_class: temperature
        # All comments are in English
        # 'delta' is the signed difference: virtual (pumpsteer) minus real outdoor temp.
        state: >
          {% set real = states('sensor.real_outdoor_temperature') %}
          {% set virtual = states('sensor.pumpsteer') %}
          {% if real not in ['unknown','unavailable','none', None] 
                and virtual not in ['unknown','unavailable','none', None] %}
            {{ (virtual | float(0) - real | float(0)) | round(1) }}
          {% else %}
            unavailable
          {% endif %}
        availability: >
          {{ states('sensor.real_outdoor_temperature') not in ['unknown','unavailable', 'none']
             and states('sensor.pumpsteer') not in ['unknown','unavailable','none'] }}

  - sensor:
      - name: "Forecast Temperatures List"
        state: >
          {{ states('input_text.hourly_forecast_temperatures') }}
        attributes:
          values: >
            {% set raw = states('input_text.hourly_forecast_temperatures') %}
            {% set list = raw.split(',') %}
            {{ list | map('float') | list }}
      
# ═══════════════════════════════════════════════════════════
# STATISTICS SENSORS
# ═══════════════════════════════════════════════════════════

sensor:
  - platform: statistics
    name: "PumpSteer Daily Avg Efficiency"
    entity_id: sensor.pumpsteer_efficiency_score
    state_characteristic: mean
    max_age:
      days: 1

  - platform: statistics
    name: "PumpSteer Weekly Avg Efficiency"
    entity_id: sensor.pumpsteer_efficiency_score
    state_characteristic: mean
    max_age:
      days: 7

  - platform: statistics
    name: "PumpSteer Monthly Avg Efficiency"
    entity_id: sensor.pumpsteer_efficiency_score
    state_characteristic: mean
    max_age:
      days: 30

# ═══════════════════════════════════════════════════════════
# AUTOMATIONS
# ═══════════════════════════════════════════════════════════

automation:
  - alias: "PumpSteer - High Price Alert"
    id: pumpsteer_high_price_alert
    description: "Notification for very high electricity prices"
    mode: single
    trigger:
      - platform: template
        value_template: >
          {% set price_cat = state_attr('sensor.pumpsteer', 'price_category') %}
          {{ price_cat is not none and 'very_expensive' in price_cat }}
    condition:
      - condition: template
        value_template: >
          {% set old_cat = trigger.from_state.attributes.get('price_category') if trigger.from_state else none %}
          {% set new_cat = trigger.to_state.attributes.get('price_category') if trigger.to_state else none %}
          {{ old_cat != new_cat }}
    action:
      - service: notify.mobile_app_iphone13pro
        data:
          title: "⚡ Very high electricity price!"
          message: >
            PumpSteer has activated price braking.

            💰 Price: {{ state_attr('sensor.pumpsteer', 'current_price') | default('N/A') }} SEK/kWh
            📊 Category: {{ state_attr('sensor.pumpsteer', 'price_category') | default('N/A') }}
            🏠 Mode: {{ state_attr('sensor.pumpsteer', 'mode') | default('N/A') | title }}
          data:
            push:
              sound:
                name: default
                critical: 0
                volume: 1.0

  - alias: "PumpSteer - Pre-boost Notification"
    id: pumpsteer_preboost_notification
    description: "Notification when pre-boost is activated"
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.pumpsteer_operating_mode
        to: "Preboost"
    action:
      - service: notify.mobile_app_iphone13pro
        data:
          title: "🔥 PumpSteer Pre-boost Activated"
          message: >
            Pre-boost has started to prepare for an upcoming cold and expensive period.

            🌡️ Current temp: {{ state_attr('sensor.pumpsteer', 'outdoor_temperature') | default('N/A') }}°C
            🎯 Virtual temp: {{ states('sensor.pumpsteer') | default('N/A') }}°C
            ⏰ Inertia: {{ state_attr('sensor.pumpsteer', 'inertia') | default('N/A') }}h
          data:
            push:
              sound:
                name: default
                critical: 0
                volume: 1.0

  - alias: Apply all ML recommendations
    triggers:
      - entity_id:
          - sensor.pumpsteer_ml_analysis
        trigger: state
        attribute: recommendations
    conditions:
      - condition: state
        entity_id: input_boolean.autotune_inertia
        state: "on"
    actions:
      - target:
          entity_id: input_number.house_inertia
        data:
          value: "{{ state_attr('sensor.pumpsteer_ml_analysis', 'inertia') | float(0) }}"
        action: input_number.set_value
      - data:
          value: >-
            {{ state_attr('sensor.pumpsteer_ml_analysis', 'integral_temp_error') |
            float(0) }}
        action: input_number.set_value
        target:
          entity_id: input_number.integral_temp_error
      - data:
          value: >-
            {{ state_attr('sensor.pumpsteer_ml_analysis', 'integral_gain') |
            float(0) }}
        action: input_number.set_value
        target:
          entity_id: input_number.pumpsteer_integral_gain
      - data:
          message: >
            ML Auto-tune applied:  Inertia={{
            state_attr('sensor.pumpsteer_ml_analysis', 'inertia') }}, 
            Integral_Gain={{ state_attr('sensor.pumpsteer_ml_analysis',
            'integral_gain') }},  Integral_Temp_Error={{
            state_attr('sensor.pumpsteer_ml_analysis', 'integral_temp_error') }}
          level: info
        action: system_log.write
      - action: notify.persistent_notification
        metadata: {}
        data:
          message: ML recommendations applied successfully
