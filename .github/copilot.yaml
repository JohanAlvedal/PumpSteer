# GitHub Copilot Custom Instructions for PumpSteer
# This file provides context and guidelines for AI-assisted development

# Project Context
project_description: |
  PumpSteer is a Home Assistant custom integration for dynamic heat pump optimization.
  It manipulates outdoor temperature sensor input to optimize heating based on electricity 
  prices, indoor temperature, weather forecasts, and thermal inertia. The integration 
  includes machine learning features for adaptive control and auto-tuning.

# Language and Communication
language: English
response_requirements: |
  - All responses, code comments, and documentation must be in English
  - PR descriptions must clearly describe changes and their purpose
  - Explain technical decisions and reasoning

# Code Guidelines and Conventions
coding_standards:
  language: Python
  version: "3.11"
  
  style:
    - Follow PEP 8 conventions with project-specific relaxations
    - Use type hints for function parameters and return values
    - Use `Final` from `typing` module for constants
    - Maximum line length: 120 characters
    - Use f-strings for string formatting
    
  naming:
    - Constants: UPPER_CASE_WITH_UNDERSCORES with `Final` annotation
    - Classes: PascalCase
    - Functions/methods: snake_case
    - Private members: prefix with underscore (_private_method)
    
  imports:
    - "Group imports: standard library, third-party, local imports"
    - "Use absolute imports for clarity"
    - "Import logging and create logger: _LOGGER = logging.getLogger(__name__)"
    
  home_assistant:
    - Follow Home Assistant integration development guidelines
    - Use async/await for I/O operations
    - Properly handle entity states (check for STATE_UNAVAILABLE, STATE_UNKNOWN)
    - Use Home Assistant's notification system for user feedback
    - Store persistent data in /config directory
    
  patterns:
    - Separate configuration constants into dedicated settings modules (settings.py, ml_settings.py)
    - Use config_flow.py for integration setup
    - Use options_flow.py for user configuration options
    - Implement sensors in sensor/ directory
    - Keep business logic in separate modules (temp_control_logic.py, ml_adaptive.py, etc.)

# Development Workflow
development_rules:
  modification_policy: |
    - Only modify code when explicitly requested
    - Make minimal, surgical changes to existing code
    - Preserve working functionality unless specifically asked to change it
    - Do not refactor or "improve" code that is not part of the requested change
    
  testing:
    - Run existing tests with pytest before and after changes
    - Create tests for new functionality when appropriate
    - Use ha_test_stubs.py for Home Assistant dependency mocking
    - Ensure tests pass: pytest tests/ -v
    
  linting:
    - Run flake8 for critical errors: flake8 custom_components/pumpsteer --select=E9,F63,F7,F82,F401
    - Acceptable relaxations: E203, E501, W503, W504, E131, E122, E303, W293
    - All Python files must have valid syntax (no parser errors)
    
  validation:
    - Use hassfest for Home Assistant integration validation
    - Verify manifest.json is valid
    - Check that all required entities are properly defined

# Project-Specific Context
features:
  - Dynamic outdoor temperature manipulation for heat pump control
  - Electricity price-based optimization (Nordpool integration)
  - Machine learning for adaptive control and auto-tuning
  - Holiday mode for energy savings
  - Price classification (hybrid/percentiles models)
  - Thermal inertia auto-tuning
  - Weather forecast integration (24-hour CSV format)

key_entities:
  input_numbers:
    - indoor_target_temperature
    - pumpsteer_summer_threshold
    - pumpsteer_aggressiveness (0-5, comfort vs savings)
    - house_inertia (0-10, thermal response speed)
  
  input_booleans:
    - holiday_mode
    - autotune_inertia
  
  input_text:
    - hourly_forecast_temperatures (24 CSV values)
  
  input_datetime:
    - holiday_start
    - holiday_end
  
  input_select:
    - pumpsteer_price_model (hybrid/percentiles)

data_storage:
  - ML data: /config/pumpsteer_ml_data.json (max 100 sessions)
  - Adaptive state: /config/adaptive_state.json (auto-tuned inertia)

# Goals and Optimization
optimization_goals:
  primary: Energy cost savings while maintaining comfort
  secondary:
    - Minimize temperature drift from target
    - Adapt to house thermal characteristics
    - Prevent excessive heating during high price periods
    - Support holiday mode for extended absences

# Additional Notes
notes:
  - This is a hobby project built with AI assistance
  - The system manipulates outdoor temperature sensor input only
  - Requires properly configured basic heating system settings
  - Needs 72 hours of electricity price history in Home Assistant recorder
  - Licensed under GNU AGPL v3.0 (from v1.6.0)
  - Author: Johan Ã„lvedal

# References
documentation:
  - Repository: https://github.com/JohanAlvedal/PumpSteer
  - Issues: https://github.com/JohanAlvedal/PumpSteer/issues
  - Home Assistant docs: https://developers.home-assistant.io/
